@*
    User's module - Core Dummpers
 * Collaboratos:
 * - Álvaro Miranda
 * - Nathan Miranda
 * - Mariana Murillo
 * - Emmanuel Zúñiga
 * 
 * - Summary: password input 

*@

@using BC = BCrypt.Net.BCrypt;

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Application.Users
@using Application.Users.Implementations
@using Domain.Core.Exceptions
@using Domain.Core.Helpers
@using Domain.Core.ValueObjects
@using Domain.Users.Repositories
@using Domain.Users.Entities
@using Presentation.Core.Components
@using Presentation.Core.Layout
@using Presentation.Users.Models
@using Presentation.Users.Components



<!--    Password input  -->

<MudTextField Style=@($"--mud-palette-primary:{Colors.Blue.Accent3};") Class="InputStandard" T="string" Label="Contraseña" HelperText="Elija una contraseña fuerte"
              InputType="InputType.Password"
              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
              RequiredError="¡Contraseña requerida!" @ref="pwField1" @bind-Value="password"/>

<!--    Password confirmation  -->
<MudTextField Style=@($"--mud-palette-primary:{Colors.Blue.Accent3};") Class="InputStandard" T="string"
              Label="Conformación de contraseña" HelperText="Repita su contraseña" InputType="InputType.Password"
              Validation="@(new Func<string, string>(PasswordMatch))" @ref="pwField1" Required="true" TextChanged="HandleSubmit"/>

@code {
    public string? password { get; set; } = null!;
    MudTextField<string> pwField1;

    //event call back for the parent component
    [Parameter]
    public EventCallback<string> OnValidSubmit { get; set; }

    /// <summary>
    /// handles the user summit for password
    /// </summary>
    /// <returns>string password or null</returns>
    private Task HandleSubmit()
    {
        string passwordHash;
        if (password != null)
        {
            passwordHash = BC.HashPassword(password);
            return OnValidSubmit.InvokeAsync(passwordHash);
        }
        else
        {
            return OnValidSubmit.InvokeAsync(null);
        }

    }




    /// <summary>
    /// validates if the  password has the requirments to be accepted
    /// </summary>
    /// <param name="pw"></param>
    /// <returns></returns>
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "La contraseña es requerida!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "La contraseña debe contener al menos 8 caracteres.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "La contraseña debe contener al menos una letra mayúscula.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "La contraseña debe contener al menos una letra minúscula.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "La contraseña debe contener al menos un número.";
        if (!Regex.IsMatch(pw, @"[!@#$%^&*()_+=\[{\]};:<>|./?,-]"))
            yield return "La contraseña debe contener al menos un símbolo.";
    }

    <!--    Password confirmation  -->
    /// <summary>
    /// validates  if the passwords match
    /// </summary>
    /// <param name="arg"></param>
    /// <returns></returns>
    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Las contraseñas no coinciden.";
        return null!;
    }

    /// <summary>
    /// validates if tge string is valid 
    /// </summary>
    /// <param name="str"></param>
    /// <returns></returns>
    private IEnumerable<string> validStringInput(string str)
    {
        if (string.IsNullOrWhiteSpace(str))
        {
            yield return "La contraseña es requerida!";
            yield break;
        }
        if (Regex.IsMatch(str, @"[0-9]"))
            yield return "No debe de ingresar números.";
        if (Regex.IsMatch(str, @"[!@#$%^&*()_+=\[{\]};:<>|./?,-]"))
            yield return "No debe de ingresar símbolos.";
    }
}
